// default rules
$ab-breakpoints: (
  small: 30em,
  medium: 64em,
  large: 80em,
  huge: 90em
) !default;

// custom user's rules
$ab-mq-myRules: false !default;

@function ab-breakpointsJson($breakpoints) {
  $length: length($breakpoints);
  $i: 1;

  $string: '%7B';
  @each $key, $size in ($breakpoints) {
    $string: $string +'%22'+ $key +'%22:%22'+ $size +'%22';
    @if ($length != $i) {
      $string: $string + ',';
    }
    $i: $i + 1;
  }

  @if $ab-mq-myRules {
    $length: length($ab-mq-myRules);
    $i: 1;
    $string:  $string + ',';
    @each $key, $mq in ($ab-mq-myRules) {
      $string: $string +'%22*'+ $key +'%22:%22'+ $mq +'%22';
      @if ($length != $i) {
        $string: $string + ',';
      }
      $i: $i + 1;
    }
  }
  $string: $string + '%7D';

  @return $string;
}

// passing options from CSS to JS
#AB-mediaQuery { font-family: ab-breakpointsJson($ab-breakpoints); }

// Here are how breakpoints will be generated and watched on JS side.
// Your custom media query rules will also get watched of course:
$ab-mq-tinyOnly:   "screen and (max-width: #{map-get($ab-breakpoints, small) - 0.01})";
$ab-mq-smallOnly:  "screen and (min-width: #{map-get($ab-breakpoints, small)}) and (max-width: #{map-get($ab-breakpoints, medium) - 0.01})";
$ab-mq-small:      "screen and (min-width: #{map-get($ab-breakpoints, small)})";
$ab-mq-mediumOnly: "screen and (min-width: #{map-get($ab-breakpoints, medium)}) and (max-width: #{map-get($ab-breakpoints, large) - 0.01})";
$ab-mq-medium:     "screen and (min-width: #{map-get($ab-breakpoints, medium)})";
$ab-mq-largeOnly:  "screen and (min-width: #{map-get($ab-breakpoints, large)}) and (max-width: #{map-get($ab-breakpoints, huge) - 0.01})";
$ab-mq-large:      "screen and (min-width: #{map-get($ab-breakpoints, large)})";
$ab-mq-huge:       "screen and (min-width: #{map-get($ab-breakpoints, huge)})";
